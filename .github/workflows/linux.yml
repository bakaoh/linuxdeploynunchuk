name: linux

on:
  push:
    tags:
    - 'v*'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-16.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2
 
      - name: Checkout nunchuk-qt
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_AT: ${{ secrets.GITLAB_AT }}
        run: |
          git clone https://bakaoh:$GITLAB_AT@gitlab.com/nunchuck/nunchuck-qt nunchuk-qt --depth 1
          cd nunchuk-qt
          git submodule update --depth 1 --init --recursive

      - name: Install Qt
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.12.1-xenial
          sudo apt update
          sudo apt install qt512-meta-full
        
      - name: Install packages
        run: sudo apt install libevent-dev libssl-dev libdb-dev libdb++-dev build-essential libtool autotools-dev automake pkg-config bsdmainutils mesa-common-dev libglu1-mesa-dev zip
 
      - name: Cache libnunchuk contrib
        uses: actions/cache@v2
        id: cache-contrib
        with:
          path: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib
          key: linux-543693b92b954d186cb466a2f14b480f3bcf8c0b

      - name: Build Bitcoin Core
        if: steps.cache-contrib.outputs.cache-hit != 'true'
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/bitcoin
        run: |
          ./autogen.sh
          ./configure --without-gui --disable-zmq --with-miniupnpc=no --with-incompatible-bdb --disable-bench --disable-tests --with-boost=$BOOST_ROOT_1_72_0
          make -j8

      - name: Build SqlCipher
        if: steps.cache-contrib.outputs.cache-hit != 'true'
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/sqlcipher
        run: |
          ./configure --enable-tempstore=yes CFLAGS="-DSQLITE_HAS_CODEC" LDFLAGS="-lcrypto"
          make -j8

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Build nunchuk-qt
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          cmake -E make_directory ${{runner.workspace}}/build
          cd build
          cmake ${{runner.workspace}}/nunchuk-qt -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=$BOOST_ROOT_1_72_0 -DCMAKE_PREFIX_PATH=/opt/qt512/lib/cmake
          cmake --build . --config Release -j8

      - name: Deploy AppImage
        working-directory: ${{runner.workspace}}/linuxdeploynunchuk
        run: |
          wget -c -q "https://github.com/probonopd/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage"
          chmod a+x linuxdeployqt-7-x86_64.AppImage
          wget -c -q "https://github.com/bitcoin-core/HWI/releases/download/1.2.1/hwi-1.2.1-linux-amd64.tar.gz" -O - | tar -xz
          mv hwi deploy/appdir/bin/hwi
          mv ${{runner.workspace}}/build/nunchuck-client-qt deploy/appdir/bin/nunchuk-client-qt
          export PATH="/opt/qt512/bin:$PATH"
          cd nunchuk-linux
          ../linuxdeployqt-7-x86_64.AppImage ../deploy/appdir/share/applications/nunchuk.desktop -appimage -qmldir=${{runner.workspace}}/nunchuk-qt -no-copy-copyright-files -no-translations
          cd ..
          zip -r nunchuk-linux-${{ steps.get_version.outputs.VERSION }}.zip nunchuk-linux

      - name: Upload Artifact
        if: steps.cache-get_version.outputs.VERSION == 'main'
        uses: 'actions/upload-artifact@v2'
        with:
          name: nunchuk-linux
          path: ${{runner.workspace}}/linuxdeploynunchuk/nunchuk-linux-${{ steps.get_version.outputs.VERSION }}.zip
      
      - name: Create Release
        if: steps.cache-get_version.outputs.VERSION != 'main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: steps.cache-get_version.outputs.VERSION != 'main'
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{runner.workspace}}/linuxdeploynunchuk/nunchuk-linux-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: nunchuk-linux-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
